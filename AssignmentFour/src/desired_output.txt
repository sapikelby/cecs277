Random List of 10000 integers.
==========================================================================
Bubble Sort:	Elapsed Time:     2,969,	Comparisons:   49,991,345
Heap Sort:	Elapsed Time:         0,	Comparisons:      235,323
Quick Sort:	Elapsed Time:         0,	Comparisons:      155,534
Quick Sort (R):	Elapsed Time:         0,	Comparisons:      170,695
Merge Sort:	Elapsed Time:         0,	Comparisons:      120,451
Collection.sort: 16

Increasing List of 10000 integers.
==========================================================================
Bubble Sort:	Elapsed Time:         0,	Comparisons:        9,999
Heap Sort:	Elapsed Time:        16,	Comparisons:      244,460
QuickSort Ran out of stack space
Quick Sort:	Elapsed Time:       172,	Comparisons:   43,133,340
Quick Sort (R):	Elapsed Time:         0,	Comparisons:      144,352
Merge Sort:	Elapsed Time:         0,	Comparisons:       69,008
Collection.sort: 0

Decreasing List of 10000 integers.
==========================================================================
Bubble Sort:	Elapsed Time:     3,718,	Comparisons:   49,995,000
Heap Sort:	Elapsed Time:         0,	Comparisons:      226,682
QuickSort Ran out of stack space
Quick Sort:	Elapsed Time:       219,	Comparisons:   43,111,095
ARRAY NOT CORRECTLY SORTED
Quick Sort (R):	Elapsed Time:         0,	Comparisons:      164,372
Merge Sort:	Elapsed Time:         0,	Comparisons:       64,608
Collection.sort: 0

public ArrayList<Integer> heapSort(ArrayList<Integer> unsortedList)
	{
		Date before = new Date();
		int count = unsortedList.size();
		heapify(unsortedList, count);
		int end = count-1;
		while(end > 0)
		{
			swap(unsortedList, end, 0);
			end = end - 1;
			siftDown(unsortedList, 0, end);
		}
		Date after = new Date();
		mElapsedTime = after.getTime() - before.getTime();
		return unsortedList;
	}
	
	public void heapify(ArrayList<Integer> unsortedList, int count)
	{
		int start = count/2 - 1;
		while(start >= 0)
		{
			siftDown(unsortedList, start, count - 1);
			start -= 1;
		}
	}
	
	public void siftDown(ArrayList<Integer> unsortedList, int start, int end)
	{
		int root = start;
		while(root*2+1 <= end)
		{
			int child = root*2+1;
			int swap = root;
			mNumComparisons += 2; // two comparisons being done below
			if(unsortedList.get(swap) < unsortedList.get(child))
			{
				//mNumComparisons++;
				swap = child;
			}
			
			if(child+1 <= end && unsortedList.get(swap) < unsortedList.get(child+1))
			{
				//mNumComparisons++;
				swap = child+1;
			}
			if(swap != root)
			{
				swap(unsortedList, root, swap);
				root = swap;
			}
			else
			{
				return;
			}
			
			
		}
	}
	
	public void swap(ArrayList<Integer> unsortedList, int swapOne, int swapTwo)
	{
		int holder = unsortedList.get(swapOne);
		unsortedList.set(swapOne, unsortedList.get(swapTwo));
		unsortedList.set(swapTwo, holder);
	}
}


public ArrayList<Integer> mergeSort(ArrayList<Integer> array)
	// pre: array is full, all elements are valid integers (not null)
	// post: array is sorted in ascending order (lowest to highest)
	{
		// if the array has more than 1 element, we need to split it and merge the sorted halves
		if(array.size() > 1)
		{
			// number of elements in sub-array 1
			// if odd, sub-array 1 has the smaller half of the elements
			// e.g. if 7 elements total, sub-array 1 will have 3, and sub-array 2 will have 4
			int elementsInA1 = array.size()/2;
			// since we want an even split, we initialize the length of sub-array 2 to
			// equal the length of sub-array 1
			int elementsInA2 = elementsInA1;
			// if the array has an odd number of elements, let the second half take the extra one
			// see note (1)
			if((array.size() % 2) == 1)
				elementsInA2 += 1;
			// declare and initialize the two arrays once we've determined their sizes
			ArrayList<Integer> arr1 = new ArrayList<Integer>(elementsInA1);
			ArrayList<Integer> arr2 = new ArrayList<Integer>(elementsInA2);
			//int arr1[] = new int[elementsInA1];
			//int arr2[] = new int[elementsInA2];
			// copy the first part of 'array' into 'arr1', causing arr1 to become full
			for(int i = 0; i < elementsInA1; i++)
				arr1.add(array.get(i));
			// copy the remaining elements of 'array' into 'arr2', causing arr2 to become full
			for(int i = elementsInA1; i < elementsInA1 + elementsInA2; i++)
				//arr2[i - elementsInA1] = array[i];
				arr2.add(array.get(i));
			// recursively call mergeSort on each of the two sub-arrays that we've just created
			// note: when mergeSort returns, arr1 and arr2 will both be sorted!
			// it's not magic, the merging is done below, that's how mergesort works :)
			arr1 = mergeSort(arr1);
			arr2 = mergeSort(arr2);
			
			// the three variables below are indexes that we'll need for merging
			// [i] stores the index of the main array. it will be used to let us
			// know where to place the smallest element from the two sub-arrays.
			// [j] stores the index of which element from arr1 is currently being compared
			// [k] stores the index of which element from arr2 is currently being compared
			int i = 0, j = 0, k = 0;
			// the below loop will run until one of the sub-arrays becomes empty
			// in my implementation, it means until the index equals the length of the sub-array
			while(arr1.size() - 1 != j && arr2.size() - 1 != k)
			{
				// if the current element of arr1 is less than current element of arr2
				if(arr1.get(j) < arr2.get(k))
				{
					// copy the current element of arr1 into the final array
					//array[i] = arr1[j];
					array.add(arr1.get(j));
					// increase the index of the final array to avoid replacing the element
					// which we've just added
					i++;
					// increase the index of arr1 to avoid comparing the element
					// which we've just added
					j++;
				}
				// if the current element of arr2 is less than current element of arr1
				else
				{
					// copy the current element of arr1 into the final array
					//array[i] = arr2[k];
					array.add(arr2.get(k));
					// increase the index of the final array to avoid replacing the element
					// which we've just added
					i++;
					// increase the index of arr2 to avoid comparing the element
					// which we've just added
					k++;
				}
				mNumComparisons++;
			}
			// at this point, one of the sub-arrays has been exhausted and there are no more
			// elements in it to compare. this means that all the elements in the remaining
			// array are the highest (and sorted), so it's safe to copy them all into the
			// final array.
			while(arr1.size() -1 != j)
			{
				//array[i] = arr1[j];
				array.add(arr1.get(j));
				i++;
				j++;
			}
			//mNumComparisons++;
			while(arr2.size() -1 != k)
			{
				//array[i] = arr2[k];
				array.add(arr2.get(j));
				i++;
				k++;
			}
			//mNumComparisons++;
		}
		// return the sorted array to the caller of the function
		return array;
	}